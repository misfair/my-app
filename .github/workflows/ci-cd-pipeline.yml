name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Log in to AWS ECR
      - name: Log in to AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1 # Adjust this based on your AWS region
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}

      # Step 3: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ECR_REPOSITORY }} .
          docker tag ${{ secrets.AWS_ECR_REPOSITORY }}:latest ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}

      # Step 4: Deploy to EC2 Instance
      - name: Deploy to EC2 Instance
        env:
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_USER: ec2-user
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_PUBLIC_IP << EOF
            # Log in to AWS ECR
            aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}

            # Pull the latest Docker image
            docker pull ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}

            # Find and stop any container using port 5000
            CONTAINER_ID=$(docker ps -q --filter "ancestor=${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}" --filter "status=running")
            if [ ! -z "$CONTAINER_ID" ]; then
              echo "Stopping and removing container $CONTAINER_ID"
              docker stop "$CONTAINER_ID"
              docker rm "$CONTAINER_ID"
            else
              echo "No running container found for the image."
            fi

            # Check for any container using port 5000 and stop it
            PORT_CONTAINER=$(docker ps -q --filter "publish=5000")
            if [ ! -z "$PORT_CONTAINER" ]; then
              echo "Stopping container $PORT_CONTAINER bound to port 5000"
              docker stop "$PORT_CONTAINER"
              docker rm "$PORT_CONTAINER"
            fi

            # Start a new container with the latest image
            docker run -d -p 5000:5000 ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}
          EOF
          rm private_key.pem
